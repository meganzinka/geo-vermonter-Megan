{"ast":null,"code":"var _jsxFileName = \"/Users/megsimac/code/projects/geo-vermonter-Megan/src/components/Map.js\";\nimport { MapContainer, TileLayer, Polygon, Marker, Polyline } from \"react-leaflet\";\nimport borderData from \"../data/border\";\nimport MyComponent from \"./MyComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map(props) {\n  //Vt outline given to use in starter code that outlines that state\n  let vtOutline = borderData.geometry.coordinates[0].map(coords => [coords[1], coords[0]]); //mapcontainer - controls that zoom cannot be used, style, and initial zoom\n  //tile layer\n  // my component which allows info from map container and map to talk to app.js\n\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: props.center,\n    zoom: 8,\n    dragging: false,\n    scrollWheelZoom: false,\n    doubleClickZoom: false,\n    zoomControl: false,\n    touchZoom: false,\n    keyboard: false,\n    style: {\n      height: \"600px\",\n      width: \"600px\"\n    },\n    id: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(MyComponent, {\n      center: props.center,\n      zoom: props.zoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n      attribution: \"Tiles \\xA9 Esri \\u2014 Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), props.droppedPin ? /*#__PURE__*/_jsxDEV(Marker, {\n      position: props.droppedPin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 8\n    }, this) : /*#__PURE__*/_jsxDEV(Marker, {\n      position: props.center\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 50\n    }, this), /*#__PURE__*/_jsxDEV(Polygon, {\n      positions: vtOutline,\n      pathOptions: {\n        color: \"orange\",\n        fillOpacity: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), props.oldCenter ? /*#__PURE__*/_jsxDEV(Polyline, {\n      positions: [[props.oldCenter[0], props.oldCenter[1]], [props.center[0], props.center[1]]],\n      dashArray: '20 20'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/megsimac/code/projects/geo-vermonter-Megan/src/components/Map.js"],"names":["MapContainer","TileLayer","Polygon","Marker","Polyline","borderData","MyComponent","Map","props","vtOutline","geometry","coordinates","map","coords","center","height","width","zoom","droppedPin","color","fillOpacity","oldCenter"],"mappings":";AAAA,SACEA,YADF,EAEEC,SAFF,EAGEC,OAHF,EAIEC,MAJF,EAKEC,QALF,QAMO,eANP;AAOA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAElB;AACA,MAAIC,SAAS,GAAGJ,UAAU,CAACK,QAAX,CAAoBC,WAApB,CAAgC,CAAhC,EAAmCC,GAAnC,CAAwCC,MAAD,IAAY,CACjEA,MAAM,CAAC,CAAD,CAD2D,EAEjEA,MAAM,CAAC,CAAD,CAF2D,CAAnD,CAAhB,CAHkB,CAQpB;AACA;AACA;;AACE,sBACE,QAAC,YAAD;AACE,IAAA,MAAM,EAAEL,KAAK,CAACM,MADhB;AAEE,IAAA,IAAI,EAAE,CAFR;AAGE,IAAA,QAAQ,EAAG,KAHb;AAIE,IAAA,eAAe,EAAE,KAJnB;AAKE,IAAA,eAAe,EAAE,KALnB;AAME,IAAA,WAAW,EAAE,KANf;AAOE,IAAA,SAAS,EAAE,KAPb;AAQE,IAAA,QAAQ,EAAI,KARd;AASE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KATT;AAUE,IAAA,EAAE,EAAC,eAVL;AAAA,4BAaE,QAAC,WAAD;AAAa,MAAA,MAAM,EAAER,KAAK,CAACM,MAA3B;AAAmC,MAAA,IAAI,EAAEN,KAAK,CAACS;AAA/C;AAAA;AAAA;AAAA;AAAA,YAbF,eAeE,QAAC,SAAD;AACE,MAAA,GAAG,EAAC,+FADN;AAEE,MAAA,WAAW,EAAC;AAFd;AAAA;AAAA;AAAA;AAAA,YAfF,EAmBGT,KAAK,CAACU,UAAN,gBACA,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEV,KAAK,CAACU;AAAxB;AAAA;AAAA;AAAA;AAAA,YADA,gBAC0C,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEV,KAAK,CAACM;AAAxB;AAAA;AAAA;AAAA;AAAA,YApB7C,eAqBE,QAAC,OAAD;AACE,MAAA,SAAS,EAAEL,SADb;AAEE,MAAA,WAAW,EAAE;AAAEU,QAAAA,KAAK,EAAE,QAAT;AAAmBC,QAAAA,WAAW,EAAE;AAAhC;AAFf;AAAA;AAAA;AAAA;AAAA,YArBF,EA0BKZ,KAAK,CAACa,SAAN,gBAAmB,QAAC,QAAD;AAAU,MAAA,SAAS,EAAE,CACvC,CAACb,KAAK,CAACa,SAAN,CAAgB,CAAhB,CAAD,EAAqBb,KAAK,CAACa,SAAN,CAAgB,CAAhB,CAArB,CADuC,EAEvC,CAACb,KAAK,CAACM,MAAN,CAAa,CAAb,CAAD,EAAkBN,KAAK,CAACM,MAAN,CAAa,CAAb,CAAlB,CAFuC,CAArB;AAGjB,MAAA,SAAS,EAAG;AAHK;AAAA;AAAA;AAAA;AAAA,YAAnB,GAIO,IA9BZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD;;KA9CQP,G;AAgDT,eAAeA,GAAf","sourcesContent":["import {\n  MapContainer,\n  TileLayer,\n  Polygon,\n  Marker,\n  Polyline,\n} from \"react-leaflet\";\nimport borderData from \"../data/border\";\nimport MyComponent from \"./MyComponent\";\n\n\nfunction Map(props) {\n\n  //Vt outline given to use in starter code that outlines that state\n  let vtOutline = borderData.geometry.coordinates[0].map((coords) => [\n    coords[1],\n    coords[0],\n  ]);\n  \n//mapcontainer - controls that zoom cannot be used, style, and initial zoom\n//tile layer\n// my component which allows info from map container and map to talk to app.js\n  return (\n    <MapContainer\n      center={props.center}\n      zoom={8}\n      dragging= {false}\n      scrollWheelZoom={false}\n      doubleClickZoom={false}\n      zoomControl={false}\n      touchZoom={false}\n      keyboard = {false}  \n      style={{ height: \"600px\", width: \"600px\" }}\n      id=\"map-container\"\n    >\n\n      <MyComponent center={props.center} zoom={props.zoom} />\n\n      <TileLayer\n        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n        attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n      />\n      {props.droppedPin ? \n      (<Marker position={props.droppedPin} />) : <Marker position={props.center} /> }\n      <Polygon\n        positions={vtOutline}\n        pathOptions={{ color: \"orange\", fillOpacity: 0 }}\n      />\n\n        {props.oldCenter ? (<Polyline positions={[\n          [props.oldCenter[0], props.oldCenter[1]], \n          [props.center[0], props.center[1]],\n        ]} dashArray= {'20 20'}\n          />) : null}\n\n    </MapContainer>\n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}