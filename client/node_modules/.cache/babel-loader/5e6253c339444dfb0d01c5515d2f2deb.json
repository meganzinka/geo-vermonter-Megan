{"ast":null,"code":"var _jsxFileName = \"/Users/megsimac/code/projects/geo-vermonter-Megan/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./style/App.css\";\nimport { useState } from \"react\";\nimport Map from \"./components/Map\";\nimport GeoData from \"./components/GeoData\";\nimport Compass from \"./components/Compass\";\nimport Score from \"./components/Score\";\nimport borderData from \"./data/border\";\nimport leafletPip from \"leaflet-pip\";\nimport L from \"leaflet\";\nimport DisplayButtons from \"./components/DisplayButtons\";\nimport Panel from \"./components/Panel\";\nimport Guess from \"./components/Guess\";\nimport logo from \"./images/LOGO.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //starting center location, use setSenter to change center based on random point, N E S W directionals\n  const [center, setCenter] = useState([43.88, -72.7317]); //starting zoom\n\n  const [zoom, setZoom] = useState(8); //use start to signify when the game has been started\n\n  const [start, setStart] = useState(false); //droppedPin is random location in VT\n\n  const [droppedPin, setDroppedPin] = useState(\"\"); //use userGiveUp to signify if the user clicks this button and ends game\n\n  const [userGiveUp, setUserGiveUp] = useState(false); //location object to store county and town of dropped pin\n\n  const [location, setLocation] = useState({\n    county: \"\",\n    town: \"\"\n  }); //newGame to pop up after a game has been won or ended\n\n  const [newGame, setNewGame] = useState(); //store status of winning\n\n  const [win, setWin] = useState(false); //guess state to store if user would like to make a guess or not\n\n  const [guess, setGuess] = useState(false); //bring back user to original dropped pin if they used directionals\n\n  const [returnToStart, setReturnToStart] = useState(false); //score\n\n  const [score, setScore] = useState(100); //old center stored to draw Polyline from point to point\n\n  const [oldCenter, setOldCenter] = useState(); //declare newX and newY to find new center\n\n  let newX;\n  let newY; //choose random lat and long and check and see if it's without hte bounds\n\n  function gameStart(evt) {\n    //layers = length of array where valid lat,long point is added\n    let layers = 0;\n    let xMin = -73.42613118833583;\n    let xMax = -71.51022535353107;\n    let yMin = 42.730315121762715;\n    let yMax = 45.00541896831666; //use while loop to keep looping through until there is a point in VT\n\n    while (layers !== 1) {\n      //choose random lat and long within bounds\n      newX = xMin + Math.random() * (xMax - xMin);\n      newY = yMin + Math.random() * (yMax - yMin); //if new point is within VT, it will be added to array, array will have length of 1, so will exit loop\n\n      layers = leafletPip.pointInLayer([newX, newY], L.geoJSON(borderData), true).length;\n    } //change center to the valid lat and long values\n\n\n    setCenter([newY, newX]); //make start button go away\n\n    evt.target.style.display = \"none\"; //start game = true\n\n    setStart(true); //zoom in\n\n    setZoom(18); //store the new location in dropped pin\n\n    setDroppedPin([newY, newX]);\n  } //changing direction\n\n\n  let changeDirection = evt => {\n    if (evt.target.id === \"north\") {\n      setOldCenter(center);\n      setCenter([center[0] + 0.002, center[1]]);\n      setScore(score - 1);\n    }\n\n    if (evt.target.id === \"east\") {\n      setOldCenter(center);\n      setCenter([center[0], center[1] + 0.002]);\n      setScore(score - 1);\n    }\n\n    if (evt.target.id === \"south\") {\n      setOldCenter(center);\n      setCenter([center[0] - 0.002, center[1]]);\n      setScore(score - 1);\n    }\n\n    if (evt.target.id === \"west\") {\n      setOldCenter(center);\n      setCenter([center[0], center[1] - 0.002]);\n      setScore(score - 1);\n    }\n  };\n\n  if (returnToStart) {\n    setCenter(droppedPin);\n    setReturnToStart(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"App-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      id: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"game-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"game-logo\",\n          src: logo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        center: center,\n        zoom: zoom,\n        droppedPin: droppedPin,\n        returnToStart: returnToStart,\n        oldCenter: oldCenter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DisplayButtons, {\n        droppedPin: droppedPin,\n        start: start,\n        setStart: setStart,\n        setUserGiveUp: setUserGiveUp,\n        location: location,\n        setWin: setWin,\n        win: win,\n        setGuess: setGuess,\n        guess: guess,\n        newGame: newGame,\n        setNewGame: setNewGame,\n        setReturnToStart: setReturnToStart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"compass-container\",\n      children: /*#__PURE__*/_jsxDEV(Compass, {\n        id: \"compass\",\n        droppedPin: droppedPin,\n        center: center,\n        changeDirection: changeDirection,\n        start: start\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GeoData, {\n      start: start,\n      droppedPin: droppedPin,\n      userGiveUp: userGiveUp,\n      setLocation: setLocation,\n      location: location,\n      win: win\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Guess, {\n      location: location,\n      guess: guess,\n      setGuess: setGuess,\n      win: win,\n      setWin: setWin,\n      setScore: setScore,\n      score: score,\n      userGiveUp: userGiveUp,\n      setUserGiveUp: setUserGiveUp,\n      setStart: setStart,\n      setNewGame: setNewGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), start || userGiveUp ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"panel-container\",\n      children: /*#__PURE__*/_jsxDEV(Panel, {\n        id: \"panel\",\n        start: start,\n        location: location,\n        droppedPin: droppedPin,\n        userGiveUp: userGiveUp,\n        win: win\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 8\n    }, this) : null, start ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"score-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Score, {\n        score: score,\n        id: \"score\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 8\n    }, this) : null, !start && !userGiveUp ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"welcome-message\",\n      children: \" Welcome to Geo-Vermonter! When you hit start, you'll be dropped at a random location within Vermont. Use the North, South, East and West buttons to look around, but beware: you lose one point every time you do so.  When you think you know what county you're in, press guess! Each incorrect guess will subtract 10 points from your score. Good luck! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 8\n    }, this) : null, !start && !userGiveUp ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"start-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"start-button\",\n        onClick: gameStart,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 8\n    }, this) : null, newGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-game-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 8\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/mMEheoMPCrejd/RMQ6t7F0OI+4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/megsimac/code/projects/geo-vermonter-Megan/src/App.js"],"names":["useState","Map","GeoData","Compass","Score","borderData","leafletPip","L","DisplayButtons","Panel","Guess","logo","App","center","setCenter","zoom","setZoom","start","setStart","droppedPin","setDroppedPin","userGiveUp","setUserGiveUp","location","setLocation","county","town","newGame","setNewGame","win","setWin","guess","setGuess","returnToStart","setReturnToStart","score","setScore","oldCenter","setOldCenter","newX","newY","gameStart","evt","layers","xMin","xMax","yMin","yMax","Math","random","pointInLayer","geoJSON","length","target","style","display","changeDirection","id","window","reload"],"mappings":"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","sourcesContent":["import \"./style/App.css\";\nimport { useState } from \"react\";\nimport Map from \"./components/Map\";\nimport GeoData from \"./components/GeoData\";\nimport Compass from \"./components/Compass\";\nimport Score from \"./components/Score\";\nimport borderData from \"./data/border\";\nimport leafletPip from \"leaflet-pip\";\nimport L from \"leaflet\";\nimport DisplayButtons from \"./components/DisplayButtons\";\nimport Panel from \"./components/Panel\";\nimport Guess from \"./components/Guess\";\nimport logo from \"./images/LOGO.png\";\n\nfunction App() {\n  //starting center location, use setSenter to change center based on random point, N E S W directionals\n  const [center, setCenter] = useState([43.88, -72.7317]);\n  //starting zoom\n  const [zoom, setZoom] = useState(8);\n  //use start to signify when the game has been started\n  const [start, setStart] = useState(false);\n  //droppedPin is random location in VT\n  const [droppedPin, setDroppedPin] = useState(\"\");\n  //use userGiveUp to signify if the user clicks this button and ends game\n  const [userGiveUp, setUserGiveUp] = useState(false);\n  //location object to store county and town of dropped pin\n  const [location, setLocation] = useState({ county: \"\", town: \"\" });\n  //newGame to pop up after a game has been won or ended\n  const [newGame, setNewGame] = useState();\n  //store status of winning\n  const [win, setWin] = useState(false);\n  //guess state to store if user would like to make a guess or not\n  const [guess, setGuess] = useState(false);\n  //bring back user to original dropped pin if they used directionals\n  const [returnToStart, setReturnToStart] = useState(false);\n  //score\n  const [score, setScore] = useState(100);\n  //old center stored to draw Polyline from point to point\n  const [oldCenter, setOldCenter] = useState();\n  //declare newX and newY to find new center\n  let newX;\n  let newY;\n\n  //choose random lat and long and check and see if it's without hte bounds\n  function gameStart(evt) {\n    //layers = length of array where valid lat,long point is added\n    let layers = 0;\n    let xMin = -73.42613118833583;\n    let xMax = -71.51022535353107;\n    let yMin = 42.730315121762715;\n    let yMax = 45.00541896831666;\n\n    //use while loop to keep looping through until there is a point in VT\n    while (layers !== 1) {\n      //choose random lat and long within bounds\n      newX = xMin + Math.random() * (xMax - xMin);\n      newY = yMin + Math.random() * (yMax - yMin);\n      //if new point is within VT, it will be added to array, array will have length of 1, so will exit loop\n      layers = leafletPip.pointInLayer(\n        [newX, newY],\n        L.geoJSON(borderData),\n        true\n      ).length;\n    }\n    //change center to the valid lat and long values\n    setCenter([newY, newX]);\n    //make start button go away\n    evt.target.style.display = \"none\";\n    //start game = true\n    setStart(true);\n    //zoom in\n    setZoom(18);\n    //store the new location in dropped pin\n    setDroppedPin([newY, newX]);\n  }\n  //changing direction\n  let changeDirection = (evt) => {\n    if (evt.target.id === \"north\") {\n      setOldCenter(center);\n      setCenter([center[0] + 0.002, center[1]]);\n      setScore(score - 1);\n    }\n    if (evt.target.id === \"east\") {\n      setOldCenter(center);\n      setCenter([center[0], center[1] + 0.002]);\n      setScore(score - 1);\n    }\n    if (evt.target.id === \"south\") {\n      setOldCenter(center);\n      setCenter([center[0] - 0.002, center[1]]);\n      setScore(score - 1);\n    }\n\n    if (evt.target.id === \"west\") {\n      setOldCenter(center);\n      setCenter([center[0], center[1] - 0.002]);\n      setScore(score - 1);\n    }\n  };\n\n  if (returnToStart) {\n    setCenter(droppedPin);\n    setReturnToStart(false);\n  }\n\n  return (\n    <div id=\"App-wrapper\">\n      <header id=\"header\">\n      <div id=\"game-logo\"><img id=\"game-logo\" src = {logo} /></div>\n      </header>\n      <div id=\"map\">\n        <Map\n          center={center}\n          zoom={zoom}\n          droppedPin={droppedPin}\n          returnToStart={returnToStart}\n          oldCenter={oldCenter}\n        />\n      </div>\n      <div >\n        <DisplayButtons\n          droppedPin={droppedPin}\n          start={start}\n          setStart={setStart}\n          setUserGiveUp={setUserGiveUp}\n          location={location}\n          setWin={setWin}\n          win={win}\n          setGuess={setGuess}\n          guess={guess}\n          newGame={newGame}\n          setNewGame={setNewGame}\n          setReturnToStart={setReturnToStart}\n        />\n      </div>\n      <div id=\"compass-container\">\n        <Compass\n          id=\"compass\"\n          droppedPin={droppedPin}\n          center={center}\n          changeDirection={changeDirection}\n          start={start}\n        />\n      </div>\n      <GeoData\n        start={start}\n        droppedPin={droppedPin}\n        userGiveUp={userGiveUp}\n        setLocation={setLocation}\n        location={location}\n        win={win}\n      />\n      <Guess\n        location={location}\n        guess={guess}\n        setGuess={setGuess}\n        win={win}\n        setWin={setWin}\n        setScore={setScore}\n        score={score}\n        userGiveUp={userGiveUp}\n        setUserGiveUp={setUserGiveUp}\n        setStart={setStart}\n        setNewGame={setNewGame}\n      />\n      {start || userGiveUp? \n      (<div id=\"panel-container\">\n        <Panel\n          id=\"panel\"\n          start={start}\n          location={location}\n          droppedPin={droppedPin}\n          userGiveUp={userGiveUp}\n          win={win}\n        />\n      </div>) : null }\n      {start ? \n      (<div id=\"score-wrapper\">\n        <Score score={score} id=\"score\" />\n      </div>) : null }\n\n      {!start && !userGiveUp? \n      (<div id = \"welcome-message\"> Welcome to Geo-Vermonter! \n      When you hit start, you'll be dropped at a random location within Vermont. Use the North, South, East and West buttons to look around, but beware: you lose one point every time you do so.  When you think you know what county you're in, press guess! Each incorrect guess will subtract 10 points from your score. Good luck! </div>) : null}\n\n      {!start && !userGiveUp? \n      (<div id=\"start-container\">\n      <button id=\"start-button\" onClick={gameStart}>\n        Start\n      </button>\n      </div>) : null}\n      {newGame ? \n      (<div id =\"new-game-container\">\n        <button onClick={() => window.location.reload()}>New Game</button>\n      </div>) : null } \n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}