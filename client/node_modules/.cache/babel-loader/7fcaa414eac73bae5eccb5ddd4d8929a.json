{"ast":null,"code":"var _jsxFileName = \"/Users/megsimac/code/projects/geo-vermonter-Megan/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./style/App.css\";\nimport { useState } from \"react\";\nimport Map from \"./components/Map\";\nimport GeoData from \"./components/GeoData\";\nimport Compass from \"./components/Compass\";\nimport Score from \"./components/Score\";\nimport borderData from \"./data/border\";\nimport leafletPip from \"leaflet-pip\";\nimport L from \"leaflet\";\nimport DisplayButtons from \"./components/DisplayButtons\";\nimport Panel from \"./components/Panel\";\nimport Guess from \"./components/Guess\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //starting center location, use setSenter to change center based on random point, N E S W directionals\n  const [center, setCenter] = useState([43.88, -72.7317]); //starting zoom \n\n  const [zoom, setZoom] = useState(8); //use start to signify when the game has been started \n\n  const [start, setStart] = useState(false); //droppedPin is random location in VT \n\n  const [droppedPin, setDroppedPin] = useState(\"\"); //use userGiveUp to signify if the user clicks this button and ends game \n\n  const [userGiveUp, setUserGiveUp] = useState(false); //location object to store county and town of dropped pin \n\n  const [location, setLocation] = useState({\n    county: \"\",\n    town: \"\"\n  }); //newGame to pop up after a game has been won or ended \n\n  const [newGame, setNewGame] = useState(); //store status of winning\n\n  const [win, setWin] = useState(false); //guess state to store if user would like to make a guess or not \n\n  const [guess, setGuess] = useState(false); //bring back user to original dropped pin if they used directionals \n\n  const [returnToStart, setReturnToStart] = useState(false); //score \n\n  const [score, setScore] = useState(100); //old center stored to draw Polyline from point to point \n\n  const [oldCenter, setOldCenter] = useState(); //declare newX and newY to find new center\n\n  let newX;\n  let newY; //choose random lat and long and check and see if it's without hte bounds\n\n  function gameStart(evt) {\n    //layers = length of array where valid lat,long point is added\n    let layers = 0;\n    let xMin = -73.42613118833583;\n    let xMax = -71.51022535353107;\n    let yMin = 42.730315121762715;\n    let yMax = 45.00541896831666; //use while loop to keep looping through until there is a point in VT\n\n    while (layers !== 1) {\n      //choose random lat and long within bounds\n      newX = xMin + Math.random() * (xMax - xMin);\n      newY = yMin + Math.random() * (yMax - yMin); //if new point is within VT, it will be added to array, array will have length of 1, so will exit loop\n\n      layers = leafletPip.pointInLayer([newX, newY], L.geoJSON(borderData), true).length;\n    } //change center to the valid lat and long values\n\n\n    setCenter([newY, newX]); //make start button go away\n\n    evt.target.style.display = \"none\"; //start game = true\n\n    setStart(true); //zoom in\n\n    setZoom(18); //store the new location in dropped pin\n\n    setDroppedPin([newY, newX]);\n  } //changing direction\n\n\n  let changeDirection = evt => {\n    if (evt.target.id === \"north\") {\n      setOldCenter(center);\n      setCenter([center[0] + 0.002, center[1]]);\n      setScore(score - 1);\n    }\n\n    if (evt.target.id === \"east\") {\n      setOldCenter(center);\n      setCenter([center[0], center[1] + 0.002]);\n      setScore(score - 1);\n    }\n\n    if (evt.target.id === \"south\") {\n      setOldCenter(center);\n      setCenter([center[0] - 0.002, center[1]]);\n      setScore(score - 1);\n    }\n\n    if (evt.target.id === \"west\") {\n      setOldCenter(center);\n      setCenter([center[0], center[1] - 0.002]);\n      setScore(score - 1);\n    }\n  };\n\n  if (returnToStart) {\n    setCenter(droppedPin);\n    setReturnToStart(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"App-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      id: \"header\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"geovermonter\",\n        children: \"Geovrmonter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"guess-the-county\",\n        children: \"Guess the County\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 70\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        center: center,\n        zoom: zoom,\n        droppedPin: droppedPin,\n        returnToStart: returnToStart,\n        oldCenter: oldCenter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"display-buttons-container\",\n      children: /*#__PURE__*/_jsxDEV(DisplayButtons, {\n        droppedPin: droppedPin,\n        start: start,\n        setStart: setStart,\n        setUserGiveUp: setUserGiveUp,\n        location: location,\n        setWin: setWin,\n        win: win,\n        setGuess: setGuess,\n        guess: guess,\n        newGame: newGame,\n        setNewGame: setNewGame,\n        setReturnToStart: setReturnToStart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"compass-container\",\n      children: /*#__PURE__*/_jsxDEV(Compass, {\n        id: \"compass\",\n        droppedPin: droppedPin,\n        center: center,\n        changeDirection: changeDirection,\n        start: start\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GeoData, {\n      start: start,\n      droppedPin: droppedPin,\n      userGiveUp: userGiveUp,\n      setLocation: setLocation,\n      location: location,\n      win: win\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Guess, {\n      location: location,\n      guess: guess,\n      setGuess: setGuess,\n      win: win,\n      setWin: setWin,\n      setScore: setScore,\n      score: score,\n      userGiveUp: userGiveUp,\n      setUserGiveUp: setUserGiveUp,\n      setStart: setStart,\n      setNewGame: setNewGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"panel-container\",\n      children: /*#__PURE__*/_jsxDEV(Panel, {\n        id: \"panel\",\n        start: start,\n        location: location,\n        droppedPin: droppedPin,\n        userGiveUp: userGiveUp,\n        win: win\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"score-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Score, {\n        score: score,\n        id: \"score\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"start-button\",\n      onClick: gameStart,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1yowcTQ+Qwhrc8vu7H/bnxQutDI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/megsimac/code/projects/geo-vermonter-Megan/src/App.js"],"names":["useState","Map","GeoData","Compass","Score","borderData","leafletPip","L","DisplayButtons","Panel","Guess","App","center","setCenter","zoom","setZoom","start","setStart","droppedPin","setDroppedPin","userGiveUp","setUserGiveUp","location","setLocation","county","town","newGame","setNewGame","win","setWin","guess","setGuess","returnToStart","setReturnToStart","score","setScore","oldCenter","setOldCenter","newX","newY","gameStart","evt","layers","xMin","xMax","yMin","yMax","Math","random","pointInLayer","geoJSON","length","target","style","display","changeDirection","id"],"mappings":"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","sourcesContent":["import \"./style/App.css\";\nimport { useState } from \"react\";\nimport Map from \"./components/Map\";\nimport GeoData from \"./components/GeoData\";\nimport Compass from \"./components/Compass\";\nimport Score from \"./components/Score\";\nimport borderData from \"./data/border\";\nimport leafletPip from \"leaflet-pip\";\nimport L from \"leaflet\";\nimport DisplayButtons from \"./components/DisplayButtons\";\nimport Panel from \"./components/Panel\";\nimport Guess from \"./components/Guess\";\n\nfunction App() {\n  //starting center location, use setSenter to change center based on random point, N E S W directionals\n  const [center, setCenter] = useState([43.88, -72.7317]);\n  //starting zoom \n  const [zoom, setZoom] = useState(8);\n  //use start to signify when the game has been started \n  const [start, setStart] = useState(false);\n  //droppedPin is random location in VT \n  const [droppedPin, setDroppedPin] = useState(\"\");\n  //use userGiveUp to signify if the user clicks this button and ends game \n  const [userGiveUp, setUserGiveUp] = useState(false);\n  //location object to store county and town of dropped pin \n  const [location, setLocation] = useState({county:\"\", town: \"\"})\n  //newGame to pop up after a game has been won or ended \n  const [newGame, setNewGame] = useState()\n  //store status of winning\n  const [win, setWin] = useState(false);\n  //guess state to store if user would like to make a guess or not \n  const [guess, setGuess] = useState(false);\n  //bring back user to original dropped pin if they used directionals \n  const [returnToStart, setReturnToStart] = useState(false)\n  //score \n  const [score, setScore] = useState(100)\n  //old center stored to draw Polyline from point to point \n  const [oldCenter, setOldCenter] = useState()\n  //declare newX and newY to find new center\n  let newX;\n  let newY;\n\n  //choose random lat and long and check and see if it's without hte bounds\n  function gameStart(evt) {\n    //layers = length of array where valid lat,long point is added\n    let layers = 0;\n    let xMin = -73.42613118833583;\n    let xMax = -71.51022535353107;\n    let yMin = 42.730315121762715;\n    let yMax = 45.00541896831666;\n\n    //use while loop to keep looping through until there is a point in VT\n    while (layers !== 1) {\n      //choose random lat and long within bounds\n      newX = xMin + Math.random() * (xMax - xMin);\n      newY = yMin + Math.random() * (yMax - yMin);\n      //if new point is within VT, it will be added to array, array will have length of 1, so will exit loop\n      layers = leafletPip.pointInLayer(\n        [newX, newY],\n        L.geoJSON(borderData),\n        true\n      ).length;\n    }\n    //change center to the valid lat and long values\n    setCenter([newY, newX]);\n    //make start button go away\n    evt.target.style.display = \"none\";\n    //start game = true\n    setStart(true);\n    //zoom in\n    setZoom(18);\n    //store the new location in dropped pin\n    setDroppedPin([newY, newX]);\n  }\n  //changing direction\n  let changeDirection = (evt) => {\n    if (evt.target.id === \"north\") {\n      setOldCenter(center)\n      setCenter([center[0] + 0.002, center[1]]);\n      setScore(score -1)\n    }\n    if (evt.target.id === \"east\") {\n      setOldCenter(center)\n      setCenter([center[0], center[1] + 0.002]);\n      setScore(score -1)\n    }\n    if (evt.target.id === \"south\") {\n      setOldCenter(center)\n      setCenter([center[0] - 0.002, center[1]]);\n      setScore(score -1)\n    }\n\n    if (evt.target.id === \"west\") {\n      setOldCenter(center)\n      setCenter([center[0], center[1] - 0.002]);\n      setScore(score -1)\n    }\n  };\n\n  if (returnToStart) {\n    setCenter(droppedPin)\n    setReturnToStart(false)\n  }\n\n  return (\n    <div id=\"App-wrapper\">\n      <header id =\"header\"> <div id =\"geovermonter\">Geovrmonter</div><div id=\"guess-the-county\">Guess the County</div></header>\n      <div id = \"map\">\n      <Map  center={center} zoom={zoom} droppedPin={droppedPin} returnToStart = {returnToStart} oldCenter={oldCenter} />\n      </div>\n      <div id=\"display-buttons-container\">\n      <DisplayButtons\n        droppedPin={droppedPin}\n        start={start}\n        setStart = {setStart}\n        setUserGiveUp={setUserGiveUp}\n        location={location}\n        setWin={setWin}\n        win={win}\n        setGuess={setGuess}\n        guess={guess}\n        newGame = {newGame}\n        setNewGame = {setNewGame}\n        setReturnToStart = {setReturnToStart}\n      /></div>\n      <div id = \"compass-container\">\n      <Compass id = \"compass\"\n        droppedPin={droppedPin}\n        center={center}\n        changeDirection={changeDirection}\n        start = {start}\n      /></div>\n      <GeoData\n        start={start}\n        droppedPin={droppedPin}\n        userGiveUp={userGiveUp}\n        setLocation={setLocation}\n        location={location}\n        win={win}\n      />\n      <Guess\n        location={location}\n        guess={guess}\n        setGuess={setGuess}\n        win={win}\n        setWin={setWin}\n        setScore = {setScore}\n        score = {score}\n        userGiveUp = {userGiveUp}\n        setUserGiveUp = {setUserGiveUp}\n        setStart = {setStart}\n        setNewGame ={setNewGame}\n      />\n      <div id=\"panel-container\">\n      <Panel id = \"panel\"\n        start={start}\n        location={location}\n        droppedPin={droppedPin}\n        userGiveUp={userGiveUp}\n        win={win}\n      /></div>\n      <div id=\"score-wrapper\">\n      <Score score={score} id = \"score\" />\n      </div>\n      <button id=\"start-button\" onClick={gameStart}>\n        Start\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}