{"ast":null,"code":"(function () {\n  var gju = this.gju = {}; // Export the geojson object for **CommonJS**\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = gju;\n  } // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js\n\n\n  gju.lineStringsIntersect = function (l1, l2) {\n    var intersects = [];\n\n    for (var i = 0; i <= l1.coordinates.length - 2; ++i) {\n      for (var j = 0; j <= l2.coordinates.length - 2; ++j) {\n        var a1 = {\n          x: l1.coordinates[i][1],\n          y: l1.coordinates[i][0]\n        },\n            a2 = {\n          x: l1.coordinates[i + 1][1],\n          y: l1.coordinates[i + 1][0]\n        },\n            b1 = {\n          x: l2.coordinates[j][1],\n          y: l2.coordinates[j][0]\n        },\n            b2 = {\n          x: l2.coordinates[j + 1][1],\n          y: l2.coordinates[j + 1][0]\n        },\n            ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n            ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n            u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if (u_b != 0) {\n          var ua = ua_t / u_b,\n              ub = ub_t / u_b;\n\n          if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n            intersects.push({\n              'type': 'Point',\n              'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]\n            });\n          }\n        }\n      }\n    }\n\n    if (intersects.length == 0) intersects = false;\n    return intersects;\n  }; // Bounding Box\n\n\n  function boundingBoxAroundPolyCoords(coords) {\n    var xAll = [],\n        yAll = [];\n\n    for (var i = 0; i < coords[0].length; i++) {\n      xAll.push(coords[0][i][1]);\n      yAll.push(coords[0][i][0]);\n    }\n\n    xAll = xAll.sort(function (a, b) {\n      return a - b;\n    });\n    yAll = yAll.sort(function (a, b) {\n      return a - b;\n    });\n    return [[xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]]];\n  }\n\n  gju.pointInBoundingBox = function (point, bounds) {\n    return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]);\n  }; // Point in Polygon\n  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices\n\n\n  function pnpoly(x, y, coords) {\n    var vert = [[0, 0]];\n\n    for (var i = 0; i < coords.length; i++) {\n      for (var j = 0; j < coords[i].length; j++) {\n        vert.push(coords[i][j]);\n      }\n\n      vert.push(coords[i][0]);\n      vert.push([0, 0]);\n    }\n\n    var inside = false;\n\n    for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {\n      if (vert[i][0] > y != vert[j][0] > y && x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1]) inside = !inside;\n    }\n\n    return inside;\n  }\n\n  gju.pointInPolygon = function (p, poly) {\n    var coords = poly.type == \"Polygon\" ? [poly.coordinates] : poly.coordinates;\n    var insideBox = false;\n\n    for (var i = 0; i < coords.length; i++) {\n      if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true;\n    }\n\n    if (!insideBox) return false;\n    var insidePoly = false;\n\n    for (var i = 0; i < coords.length; i++) {\n      if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true;\n    }\n\n    return insidePoly;\n  }; // support multi (but not donut) polygons\n\n\n  gju.pointInMultiPolygon = function (p, poly) {\n    var coords_array = poly.type == \"MultiPolygon\" ? [poly.coordinates] : poly.coordinates;\n    var insideBox = false;\n    var insidePoly = false;\n\n    for (var i = 0; i < coords_array.length; i++) {\n      var coords = coords_array[i];\n\n      for (var j = 0; j < coords.length; j++) {\n        if (!insideBox) {\n          if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[j]))) {\n            insideBox = true;\n          }\n        }\n      }\n\n      if (!insideBox) return false;\n\n      for (var j = 0; j < coords.length; j++) {\n        if (!insidePoly) {\n          if (pnpoly(p.coordinates[1], p.coordinates[0], coords[j])) {\n            insidePoly = true;\n          }\n        }\n      }\n    }\n\n    return insidePoly;\n  };\n\n  gju.numberToRadius = function (number) {\n    return number * Math.PI / 180;\n  };\n\n  gju.numberToDegree = function (number) {\n    return number * 180 / Math.PI;\n  }; // written with help from @tautologe\n\n\n  gju.drawCircle = function (radiusInMeters, centerPoint, steps) {\n    var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],\n        dist = radiusInMeters / 1000 / 6371,\n        // convert meters to radiant\n    radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],\n        steps = steps || 15,\n        // 15 sided circle\n    poly = [[center[0], center[1]]];\n\n    for (var i = 0; i < steps; i++) {\n      var brng = 2 * Math.PI * i / steps;\n      var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist) + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));\n      var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]), Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));\n      poly[i] = [];\n      poly[i][1] = gju.numberToDegree(lat);\n      poly[i][0] = gju.numberToDegree(lng);\n    }\n\n    return {\n      \"type\": \"Polygon\",\n      \"coordinates\": [poly]\n    };\n  }; // assumes rectangle starts at lower left point\n\n\n  gju.rectangleCentroid = function (rectangle) {\n    var bbox = rectangle.coordinates[0];\n    var xmin = bbox[0][0],\n        ymin = bbox[0][1],\n        xmax = bbox[2][0],\n        ymax = bbox[2][1];\n    var xwidth = xmax - xmin;\n    var ywidth = ymax - ymin;\n    return {\n      'type': 'Point',\n      'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]\n    };\n  }; // from http://www.movable-type.co.uk/scripts/latlong.html\n\n\n  gju.pointDistance = function (pt1, pt2) {\n    var lon1 = pt1.coordinates[0],\n        lat1 = pt1.coordinates[1],\n        lon2 = pt2.coordinates[0],\n        lat2 = pt2.coordinates[1],\n        dLat = gju.numberToRadius(lat2 - lat1),\n        dLon = gju.numberToRadius(lon2 - lon1),\n        a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1)) * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),\n        c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return 6371 * c * 1000; // returns meters\n  }, // checks if geometry lies entirely within a circle\n  // works with Point, LineString, Polygon\n  gju.geometryWithinRadius = function (geometry, center, radius) {\n    if (geometry.type == 'Point') {\n      return gju.pointDistance(geometry, center) <= radius;\n    } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {\n      var point = {};\n      var coordinates;\n\n      if (geometry.type == 'Polygon') {\n        // it's enough to check the exterior ring of the Polygon\n        coordinates = geometry.coordinates[0];\n      } else {\n        coordinates = geometry.coordinates;\n      }\n\n      for (var i in coordinates) {\n        point.coordinates = coordinates[i];\n\n        if (gju.pointDistance(point, center) > radius) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }; // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt\n\n  gju.area = function (polygon) {\n    var area = 0; // TODO: polygon holes at coordinates[1]\n\n    var points = polygon.coordinates[0];\n    var j = points.length - 1;\n    var p1, p2;\n\n    for (var i = 0; i < points.length; j = i++) {\n      var p1 = {\n        x: points[i][1],\n        y: points[i][0]\n      };\n      var p2 = {\n        x: points[j][1],\n        y: points[j][0]\n      };\n      area += p1.x * p2.y;\n      area -= p1.y * p2.x;\n    }\n\n    area /= 2;\n    return area;\n  }, // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt\n  gju.centroid = function (polygon) {\n    var f,\n        x = 0,\n        y = 0; // TODO: polygon holes at coordinates[1]\n\n    var points = polygon.coordinates[0];\n    var j = points.length - 1;\n    var p1, p2;\n\n    for (var i = 0; i < points.length; j = i++) {\n      var p1 = {\n        x: points[i][1],\n        y: points[i][0]\n      };\n      var p2 = {\n        x: points[j][1],\n        y: points[j][0]\n      };\n      f = p1.x * p2.y - p2.x * p1.y;\n      x += (p1.x + p2.x) * f;\n      y += (p1.y + p2.y) * f;\n    }\n\n    f = gju.area(polygon) * 6;\n    return {\n      'type': 'Point',\n      'coordinates': [y / f, x / f]\n    };\n  }, gju.simplify = function (source, kink) {\n    /* source[] array of geojson points */\n\n    /* kink\tin metres, kinks above this depth kept  */\n\n    /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */\n    kink = kink || 20;\n    source = source.map(function (o) {\n      return {\n        lng: o.coordinates[0],\n        lat: o.coordinates[1]\n      };\n    });\n    var n_source, n_stack, n_dest, start, end, i, sig;\n    var dev_sqr, max_dev_sqr, band_sqr;\n    var x12, y12, d12, x13, y13, d13, x23, y23, d23;\n    var F = Math.PI / 180.0 * 0.5;\n    var index = new Array();\n    /* aray of indexes of source points to include in the reduced line */\n\n    var sig_start = new Array();\n    /* indices of start & end of working section */\n\n    var sig_end = new Array();\n    /* check for simple cases */\n\n    if (source.length < 3) return source;\n    /* one or two points */\n\n    /* more complex case. initialize stack */\n\n    n_source = source.length;\n    band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0);\n    /* Now in degrees */\n\n    band_sqr *= band_sqr;\n    n_dest = 0;\n    sig_start[0] = 0;\n    sig_end[0] = n_source - 1;\n    n_stack = 1;\n    /* while the stack is not empty  ... */\n\n    while (n_stack > 0) {\n      /* ... pop the top-most entries off the stacks */\n      start = sig_start[n_stack - 1];\n      end = sig_end[n_stack - 1];\n      n_stack--;\n\n      if (end - start > 1) {\n        /* any intermediate points ? */\n\n        /* ... yes, so find most deviant intermediate point to\n        either side of line joining start & end points */\n        x12 = source[end].lng() - source[start].lng();\n        y12 = source[end].lat() - source[start].lat();\n        if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);\n        x12 *= Math.cos(F * (source[end].lat() + source[start].lat()));\n        /* use avg lat to reduce lng */\n\n        d12 = x12 * x12 + y12 * y12;\n\n        for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {\n          x13 = source[i].lng() - source[start].lng();\n          y13 = source[i].lat() - source[start].lat();\n          if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);\n          x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));\n          d13 = x13 * x13 + y13 * y13;\n          x23 = source[i].lng() - source[end].lng();\n          y23 = source[i].lat() - source[end].lat();\n          if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);\n          x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));\n          d23 = x23 * x23 + y23 * y23;\n          if (d13 >= d12 + d23) dev_sqr = d23;else if (d23 >= d12 + d13) dev_sqr = d13;else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle\n\n          if (dev_sqr > max_dev_sqr) {\n            sig = i;\n            max_dev_sqr = dev_sqr;\n          }\n        }\n\n        if (max_dev_sqr < band_sqr) {\n          /* is there a sig. intermediate point ? */\n\n          /* ... no, so transfer current start point */\n          index[n_dest] = start;\n          n_dest++;\n        } else {\n          /* ... yes, so push two sub-sections on stack for further processing */\n          n_stack++;\n          sig_start[n_stack - 1] = sig;\n          sig_end[n_stack - 1] = end;\n          n_stack++;\n          sig_start[n_stack - 1] = start;\n          sig_end[n_stack - 1] = sig;\n        }\n      } else {\n        /* ... no intermediate points, so transfer current start point */\n        index[n_dest] = start;\n        n_dest++;\n      }\n    }\n    /* transfer last point */\n\n\n    index[n_dest] = n_source - 1;\n    n_dest++;\n    /* make return array */\n\n    var r = new Array();\n\n    for (var i = 0; i < n_dest; i++) r.push(source[index[i]]);\n\n    return r.map(function (o) {\n      return {\n        type: \"Point\",\n        coordinates: [o.lng, o.lat]\n      };\n    });\n  }; // http://www.movable-type.co.uk/scripts/latlong.html#destPoint\n\n  gju.destinationPoint = function (pt, brng, dist) {\n    dist = dist / 6371; // convert dist to angular distance in radians\n\n    brng = gju.numberToRadius(brng);\n    var lon1 = gju.numberToRadius(pt.coordinates[0]);\n    var lat1 = gju.numberToRadius(pt.coordinates[1]);\n    var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + Math.cos(lat1) * Math.sin(dist) * Math.cos(brng));\n    var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1), Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2));\n    lon2 = (lon2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI; // normalise to -180..+180º\n\n    return {\n      'type': 'Point',\n      'coordinates': [gju.numberToDegree(lon2), gju.numberToDegree(lat2)]\n    };\n  };\n})();","map":{"version":3,"sources":["/Users/megsimac/code/projects/geo-vermonter-Megan/node_modules/geojson-utils/geojson-utils.js"],"names":["gju","module","exports","lineStringsIntersect","l1","l2","intersects","i","coordinates","length","j","a1","x","y","a2","b1","b2","ua_t","ub_t","u_b","ua","ub","push","boundingBoxAroundPolyCoords","coords","xAll","yAll","sort","a","b","pointInBoundingBox","point","bounds","pnpoly","vert","inside","pointInPolygon","p","poly","type","insideBox","insidePoly","pointInMultiPolygon","coords_array","numberToRadius","number","Math","PI","numberToDegree","drawCircle","radiusInMeters","centerPoint","steps","center","dist","radCenter","brng","lat","asin","sin","cos","lng","atan2","rectangleCentroid","rectangle","bbox","xmin","ymin","xmax","ymax","xwidth","ywidth","pointDistance","pt1","pt2","lon1","lat1","lon2","lat2","dLat","dLon","pow","c","sqrt","geometryWithinRadius","geometry","radius","area","polygon","points","p1","p2","centroid","f","simplify","source","kink","map","o","n_source","n_stack","n_dest","start","end","sig","dev_sqr","max_dev_sqr","band_sqr","x12","y12","d12","x13","y13","d13","x23","y23","d23","F","index","Array","sig_start","sig_end","abs","r","destinationPoint","pt"],"mappings":"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","sourcesContent":["(function () {\n  var gju = this.gju = {};\n\n  // Export the geojson object for **CommonJS**\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = gju;\n  }\n\n  // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js\n  gju.lineStringsIntersect = function (l1, l2) {\n    var intersects = [];\n    for (var i = 0; i <= l1.coordinates.length - 2; ++i) {\n      for (var j = 0; j <= l2.coordinates.length - 2; ++j) {\n        var a1 = {\n          x: l1.coordinates[i][1],\n          y: l1.coordinates[i][0]\n        },\n          a2 = {\n            x: l1.coordinates[i + 1][1],\n            y: l1.coordinates[i + 1][0]\n          },\n          b1 = {\n            x: l2.coordinates[j][1],\n            y: l2.coordinates[j][0]\n          },\n          b2 = {\n            x: l2.coordinates[j + 1][1],\n            y: l2.coordinates[j + 1][0]\n          },\n          ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n          ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n          u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n        if (u_b != 0) {\n          var ua = ua_t / u_b,\n            ub = ub_t / u_b;\n          if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n            intersects.push({\n              'type': 'Point',\n              'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]\n            });\n          }\n        }\n      }\n    }\n    if (intersects.length == 0) intersects = false;\n    return intersects;\n  }\n\n  // Bounding Box\n\n  function boundingBoxAroundPolyCoords (coords) {\n    var xAll = [], yAll = []\n\n    for (var i = 0; i < coords[0].length; i++) {\n      xAll.push(coords[0][i][1])\n      yAll.push(coords[0][i][0])\n    }\n\n    xAll = xAll.sort(function (a,b) { return a - b })\n    yAll = yAll.sort(function (a,b) { return a - b })\n\n    return [ [xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]] ]\n  }\n\n  gju.pointInBoundingBox = function (point, bounds) {\n    return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]) \n  }\n\n  // Point in Polygon\n  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices\n\n  function pnpoly (x,y,coords) {\n    var vert = [ [0,0] ]\n\n    for (var i = 0; i < coords.length; i++) {\n      for (var j = 0; j < coords[i].length; j++) {\n        vert.push(coords[i][j])\n      }\n\t  vert.push(coords[i][0])\n      vert.push([0,0])\n    }\n\n    var inside = false\n    for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {\n      if (((vert[i][0] > y) != (vert[j][0] > y)) && (x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1])) inside = !inside\n    }\n\n    return inside\n  }\n\n  gju.pointInPolygon = function (p, poly) {\n    var coords = (poly.type == \"Polygon\") ? [ poly.coordinates ] : poly.coordinates\n\n    var insideBox = false\n    for (var i = 0; i < coords.length; i++) {\n      if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true\n    }\n    if (!insideBox) return false\n\n    var insidePoly = false\n    for (var i = 0; i < coords.length; i++) {\n      if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true\n    }\n\n    return insidePoly\n  }\n\n  // support multi (but not donut) polygons\n  gju.pointInMultiPolygon = function (p, poly) {\n    var coords_array = (poly.type == \"MultiPolygon\") ? [ poly.coordinates ] : poly.coordinates\n\n    var insideBox = false\n    var insidePoly = false\n    for (var i = 0; i < coords_array.length; i++){\n      var coords = coords_array[i];\n      for (var j = 0; j < coords.length; j++) {\n        if (!insideBox){\n          if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[j]))) {\n            insideBox = true\n          }\n        }\n      }\n      if (!insideBox) return false\n      for (var j = 0; j < coords.length; j++) {\n        if (!insidePoly){\n          if (pnpoly(p.coordinates[1], p.coordinates[0], coords[j])) {\n            insidePoly = true\n          }\n        }\n      }\n    }\n\n    return insidePoly\n  }\n\n  gju.numberToRadius = function (number) {\n    return number * Math.PI / 180;\n  }\n\n  gju.numberToDegree = function (number) {\n    return number * 180 / Math.PI;\n  }\n\n  // written with help from @tautologe\n  gju.drawCircle = function (radiusInMeters, centerPoint, steps) {\n    var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],\n      dist = (radiusInMeters / 1000) / 6371,\n      // convert meters to radiant\n      radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],\n      steps = steps || 15,\n      // 15 sided circle\n      poly = [[center[0], center[1]]];\n    for (var i = 0; i < steps; i++) {\n      var brng = 2 * Math.PI * i / steps;\n      var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist)\n              + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));\n      var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]),\n                                          Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));\n      poly[i] = [];\n      poly[i][1] = gju.numberToDegree(lat);\n      poly[i][0] = gju.numberToDegree(lng);\n    }\n    return {\n      \"type\": \"Polygon\",\n      \"coordinates\": [poly]\n    };\n  }\n\n  // assumes rectangle starts at lower left point\n  gju.rectangleCentroid = function (rectangle) {\n    var bbox = rectangle.coordinates[0];\n    var xmin = bbox[0][0],\n      ymin = bbox[0][1],\n      xmax = bbox[2][0],\n      ymax = bbox[2][1];\n    var xwidth = xmax - xmin;\n    var ywidth = ymax - ymin;\n    return {\n      'type': 'Point',\n      'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]\n    };\n  }\n\n  // from http://www.movable-type.co.uk/scripts/latlong.html\n  gju.pointDistance = function (pt1, pt2) {\n    var lon1 = pt1.coordinates[0],\n      lat1 = pt1.coordinates[1],\n      lon2 = pt2.coordinates[0],\n      lat2 = pt2.coordinates[1],\n      dLat = gju.numberToRadius(lat2 - lat1),\n      dLon = gju.numberToRadius(lon2 - lon1),\n      a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1))\n        * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),\n      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return (6371 * c) * 1000; // returns meters\n  },\n\n  // checks if geometry lies entirely within a circle\n  // works with Point, LineString, Polygon\n  gju.geometryWithinRadius = function (geometry, center, radius) {\n    if (geometry.type == 'Point') {\n      return gju.pointDistance(geometry, center) <= radius;\n    } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {\n      var point = {};\n      var coordinates;\n      if (geometry.type == 'Polygon') {\n        // it's enough to check the exterior ring of the Polygon\n        coordinates = geometry.coordinates[0];\n      } else {\n        coordinates = geometry.coordinates;\n      }\n      for (var i in coordinates) {\n        point.coordinates = coordinates[i];\n        if (gju.pointDistance(point, center) > radius) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt\n  gju.area = function (polygon) {\n    var area = 0;\n    // TODO: polygon holes at coordinates[1]\n    var points = polygon.coordinates[0];\n    var j = points.length - 1;\n    var p1, p2;\n\n    for (var i = 0; i < points.length; j = i++) {\n      var p1 = {\n        x: points[i][1],\n        y: points[i][0]\n      };\n      var p2 = {\n        x: points[j][1],\n        y: points[j][0]\n      };\n      area += p1.x * p2.y;\n      area -= p1.y * p2.x;\n    }\n\n    area /= 2;\n    return area;\n  },\n\n  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt\n  gju.centroid = function (polygon) {\n    var f, x = 0,\n      y = 0;\n    // TODO: polygon holes at coordinates[1]\n    var points = polygon.coordinates[0];\n    var j = points.length - 1;\n    var p1, p2;\n\n    for (var i = 0; i < points.length; j = i++) {\n      var p1 = {\n        x: points[i][1],\n        y: points[i][0]\n      };\n      var p2 = {\n        x: points[j][1],\n        y: points[j][0]\n      };\n      f = p1.x * p2.y - p2.x * p1.y;\n      x += (p1.x + p2.x) * f;\n      y += (p1.y + p2.y) * f;\n    }\n\n    f = gju.area(polygon) * 6;\n    return {\n      'type': 'Point',\n      'coordinates': [y / f, x / f]\n    };\n  },\n\n  gju.simplify = function (source, kink) { /* source[] array of geojson points */\n    /* kink\tin metres, kinks above this depth kept  */\n    /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */\n    kink = kink || 20;\n    source = source.map(function (o) {\n      return {\n        lng: o.coordinates[0],\n        lat: o.coordinates[1]\n      }\n    });\n\n    var n_source, n_stack, n_dest, start, end, i, sig;\n    var dev_sqr, max_dev_sqr, band_sqr;\n    var x12, y12, d12, x13, y13, d13, x23, y23, d23;\n    var F = (Math.PI / 180.0) * 0.5;\n    var index = new Array(); /* aray of indexes of source points to include in the reduced line */\n    var sig_start = new Array(); /* indices of start & end of working section */\n    var sig_end = new Array();\n\n    /* check for simple cases */\n\n    if (source.length < 3) return (source); /* one or two points */\n\n    /* more complex case. initialize stack */\n\n    n_source = source.length;\n    band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */\n    band_sqr *= band_sqr;\n    n_dest = 0;\n    sig_start[0] = 0;\n    sig_end[0] = n_source - 1;\n    n_stack = 1;\n\n    /* while the stack is not empty  ... */\n    while (n_stack > 0) {\n\n      /* ... pop the top-most entries off the stacks */\n\n      start = sig_start[n_stack - 1];\n      end = sig_end[n_stack - 1];\n      n_stack--;\n\n      if ((end - start) > 1) { /* any intermediate points ? */\n\n        /* ... yes, so find most deviant intermediate point to\n        either side of line joining start & end points */\n\n        x12 = (source[end].lng() - source[start].lng());\n        y12 = (source[end].lat() - source[start].lat());\n        if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);\n        x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */\n        d12 = (x12 * x12) + (y12 * y12);\n\n        for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {\n\n          x13 = source[i].lng() - source[start].lng();\n          y13 = source[i].lat() - source[start].lat();\n          if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);\n          x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));\n          d13 = (x13 * x13) + (y13 * y13);\n\n          x23 = source[i].lng() - source[end].lng();\n          y23 = source[i].lat() - source[end].lat();\n          if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);\n          x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));\n          d23 = (x23 * x23) + (y23 * y23);\n\n          if (d13 >= (d12 + d23)) dev_sqr = d23;\n          else if (d23 >= (d12 + d13)) dev_sqr = d13;\n          else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle\n          if (dev_sqr > max_dev_sqr) {\n            sig = i;\n            max_dev_sqr = dev_sqr;\n          }\n        }\n\n        if (max_dev_sqr < band_sqr) { /* is there a sig. intermediate point ? */\n          /* ... no, so transfer current start point */\n          index[n_dest] = start;\n          n_dest++;\n        } else { /* ... yes, so push two sub-sections on stack for further processing */\n          n_stack++;\n          sig_start[n_stack - 1] = sig;\n          sig_end[n_stack - 1] = end;\n          n_stack++;\n          sig_start[n_stack - 1] = start;\n          sig_end[n_stack - 1] = sig;\n        }\n      } else { /* ... no intermediate points, so transfer current start point */\n        index[n_dest] = start;\n        n_dest++;\n      }\n    }\n\n    /* transfer last point */\n    index[n_dest] = n_source - 1;\n    n_dest++;\n\n    /* make return array */\n    var r = new Array();\n    for (var i = 0; i < n_dest; i++)\n      r.push(source[index[i]]);\n\n    return r.map(function (o) {\n      return {\n        type: \"Point\",\n        coordinates: [o.lng, o.lat]\n      }\n    });\n  }\n\n  // http://www.movable-type.co.uk/scripts/latlong.html#destPoint\n  gju.destinationPoint = function (pt, brng, dist) {\n    dist = dist/6371;  // convert dist to angular distance in radians\n    brng = gju.numberToRadius(brng);\n\n    var lon1 = gju.numberToRadius(pt.coordinates[0]);\n    var lat1 = gju.numberToRadius(pt.coordinates[1]);\n\n    var lat2 = Math.asin( Math.sin(lat1)*Math.cos(dist) +\n                          Math.cos(lat1)*Math.sin(dist)*Math.cos(brng) );\n    var lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(dist)*Math.cos(lat1),\n                                 Math.cos(dist)-Math.sin(lat1)*Math.sin(lat2));\n    lon2 = (lon2+3*Math.PI) % (2*Math.PI) - Math.PI;  // normalise to -180..+180º\n\n    return {\n      'type': 'Point',\n      'coordinates': [gju.numberToDegree(lon2), gju.numberToDegree(lat2)]\n    };\n  };\n\n})();\n"]},"metadata":{},"sourceType":"script"}